version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  rest_app:
    build: 
      context: .
      dockerfile: Dockerfile
    command: ["./entrypoint.sh", "rest"]
    environment:
      - CONFIG_FILE=/app/configs/config.docker.yaml
    volumes:
      - ./configs:/app/configs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  worker_app:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["./entrypoint.sh", "worker"]
    environment:
      - CONFIG_FILE=/app/configs/config.docker.yaml
    volumes:
      - ./configs:/app/configs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:

networks:
  notification-network:
    driver: bridge